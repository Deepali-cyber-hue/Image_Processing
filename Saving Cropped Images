import cv2

# Load the video
video_path = 'video path'  # Replace with your video path
output_path = 'cropped_video_encoded.mp4'  # Path to save the encoded cropped video

# Open the video file
cap = cv2.VideoCapture(video_path)

# Check if the video was loaded successfully
if not cap.isOpened():
    print("Error: Could not open the video.")
else:
    # Get video properties
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)  # Frames per second
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    print(f"Video properties - Width: {frame_width}, Height: {frame_height}, FPS: {fps}, Total Frames: {total_frames}")

    # Define the crop area
    start_x, start_y = 147, 120      # Starting coordinates for cropping (x, y)
    crop_width, crop_height = 332, 150  # Crop dimensions (width, height)

    # Ensure crop dimensions are valid
    if start_x + crop_width > frame_width or start_y + crop_height > frame_height:
        print("Error: Crop area exceeds frame dimensions.")
        cap.release()
    else:
        # Define the codec and create VideoWriter to save the encoded output video
        # Codec 'avc1' is for H.264 encoding (MP4 format)
        fourcc = cv2.VideoWriter_fourcc(*'avc1')  # H.264 codec for MP4 format
        out = cv2.VideoWriter(output_path, fourcc, fps, (crop_width, crop_height))

        # Process each frame
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Finished processing all frames.")
                break

            # Crop the frame
            cropped_frame = frame[start_y:start_y + crop_height, start_x:start_x + crop_width]

            # Write the cropped frame to the output video
            out.write(cropped_frame)

            # Print progress every 100 frames
            frame_count += 1
            if frame_count % 100 == 0:
                print(f"Processed {frame_count}/{total_frames} frames...")

        # Release resources
        cap.release()
        out.release()

        # Confirmation message
        print(f"Cropped and encoded video saved successfully at: {output_path}")
